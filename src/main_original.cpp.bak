/**
* @file main.cpp
* @brief Point d'entr√©e principal - Version Debug S√©curis√©e
* 
* Issue: #62 - [INFRA] ESP32 Hardware Configuration
* Version avec gestion d'erreurs renforc√©e
*/

#include <Arduino.h>
#include <WiFi.h>

// Configuration du projet
#include "project_config.h"
#include "hardware_config.h"

// Inclure les gestionnaires un par un pour identifier les probl√®mes
#include "hardware/hardware_manager.h"

// Variables globales
HardwareManager* hardwareManager = nullptr;
unsigned long lastHeartbeat = 0;
bool initSuccess = false;

// Fonction de gestion des exceptions
void handleException(const char* location, const char* error) {
    Serial.printf("‚ùå EXCEPTION dans %s: %s\n", location, error);
    Serial.printf("   Free Heap: %d bytes\n", ESP.getFreeHeap());
    Serial.printf("   Stack: %d bytes\n", uxTaskGetStackHighWaterMark(NULL));
    
    // Clignoter rapidement la LED d'erreur
    pinMode(LED_STATUS_PIN, OUTPUT);
    for (int i = 0; i < 10; i++) {
        digitalWrite(LED_STATUS_PIN, HIGH);
        delay(100);
        digitalWrite(LED_STATUS_PIN, LOW);
        delay(100);
    }
    
    // Red√©marrer apr√®s 5 secondes
    Serial.println("üîÑ Red√©marrage dans 5 secondes...");
    delay(5000);
    ESP.restart();
}

void setup() {
    Serial.begin(SERIAL_BAUD_RATE);
    
    // Attendre que le port s√©rie soit pr√™t avec timeout
    unsigned long start = millis();
    while (!Serial && (millis() - start < 3000)) {
        delay(10);
    }
    
    Serial.println();
    Serial.println("=================================");
    Serial.println("ESP32 Hardware Manager - DEBUG");
    Serial.println("     DOIT DevKitC v1");
    Serial.println("     Version S√©curis√©e");
    Serial.println("=================================");
    
    #ifdef SIMULATION_MODE
    Serial.println("‚ö†Ô∏è MODE SIMULATION ACTIV√â");
    #endif
    
    // Afficher les informations syst√®me
    Serial.printf("Board: %s %s\n", BOARD_NAME, BOARD_VERSION);
    Serial.printf("CPU Freq: %d MHz\n", getCpuFrequencyMhz());
    Serial.printf("Flash Size: %d MB\n", ESP.getFlashChipSize() / (1024 * 1024));
    Serial.printf("Free Heap: %d bytes\n", ESP.getFreeHeap());
    Serial.printf("Stack disponible: %d bytes\n", uxTaskGetStackHighWaterMark(NULL));
    
    // Test de base des pins
    Serial.println("üîß Test des pins de base...");
    pinMode(LED_STATUS_PIN, OUTPUT);
    pinMode(LED_ERROR_PIN, OUTPUT);
    
    digitalWrite(LED_STATUS_PIN, LOW);
    digitalWrite(LED_ERROR_PIN, LOW);
    
    // Test LED
    for (int i = 0; i < 3; i++) {
        digitalWrite(LED_STATUS_PIN, HIGH);
        delay(200);
        digitalWrite(LED_STATUS_PIN, LOW);
        delay(200);
    }
    
    Serial.println("‚úÖ Test des pins OK");
    
    // ========================================================================
    // INITIALISATION S√âCURIS√âE DU GESTIONNAIRE HARDWARE
    // ========================================================================
    
    try {
        Serial.println("üîß Initialisation du gestionnaire hardware...");
        
        // Allouer le gestionnaire
        hardwareManager = new HardwareManager();
        if (!hardwareManager) {
            handleException("setup", "Allocation HardwareManager √©chou√©e");
            return;
        }
        
        Serial.printf("   Heap apr√®s allocation: %d bytes\n", ESP.getFreeHeap());
        
        // Initialiser
        if (!hardwareManager->init()) {
            handleException("setup", "Initialisation HardwareManager √©chou√©e");
            return;
        }
        
        Serial.printf("   Heap apr√®s init: %d bytes\n", ESP.getFreeHeap());
        Serial.println("‚úÖ Gestionnaire hardware initialis√©");
        
        initSuccess = true;
        
    } catch (const std::exception& e) {
        handleException("setup", e.what());
        return;
    } catch (...) {
        handleException("setup", "Exception inconnue");
        return;
    }
    
    Serial.println("\nüöÄ Initialisation termin√©e!");
    Serial.println("üíì D√©marrage de la boucle principale...\n");
    
    // S√©quence de d√©marrage r√©ussie
    for (int i = 0; i < 5; i++) {
        digitalWrite(LED_STATUS_PIN, HIGH);
        delay(100);
        digitalWrite(LED_STATUS_PIN, LOW);
        delay(100);
    }
    
    lastHeartbeat = millis();
}

void loop() {
    unsigned long now = millis();
    
    // V√©rifier que l'initialisation a r√©ussi
    if (!initSuccess || !hardwareManager) {
        // Mode d√©grad√© - juste clignoter la LED d'erreur
        static unsigned long lastErrorBlink = 0;
        if (now - lastErrorBlink >= 500) {
            static bool errorLedState = false;
            errorLedState = !errorLedState;
            digitalWrite(LED_ERROR_PIN, errorLedState);
            lastErrorBlink = now;
        }
        return;
    }
    
    // ========================================================================
    // BOUCLE S√âCURIS√âE
    // ========================================================================
    
    try {
        // Boucle du gestionnaire hardware
        hardwareManager->loop();
        
        // Heartbeat toutes les 10 secondes
        if (now - lastHeartbeat >= 10000) {
            Serial.printf("üíì [%8lu] Heartbeat - HW: %d, Heap: %d bytes, Stack: %d\n", 
                         now, hardwareManager->getState(), ESP.getFreeHeap(),
                         uxTaskGetStackHighWaterMark(NULL));
            
            // Afficher les mesures
            hardware_measurements_t measurements = hardwareManager->readMeasurements();
            Serial.printf("üìä Measurements: %.2f A, %.2f V, %.2f ¬∞C\n",
                         measurements.current_l1, measurements.voltage, measurements.temperature);
            
            lastHeartbeat = now;
        }
        
        // Petite pause pour √©viter de surcharger le CPU
        delay(10);
        
    } catch (const std::exception& e) {
        handleException("loop", e.what());
    } catch (...) {
        handleException("loop", "Exception inconnue dans loop");
    }
}
